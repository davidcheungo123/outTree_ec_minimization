import * as d3 from 'd3';
import * as fs from 'fs';

"STEP 1-----------------------------------------------------------------------"
const fileName = "nodes_links_222"
let unprocessedData = fs.readFileSync(`data/pure/${fileName}.json`)
unprocessedData = JSON.parse(unprocessedData)
let nodes = unprocessedData["nodes"]
let links = unprocessedData["links"]

const ticked = () => {
    console.log(`running... alpha: ${Math.round(simulation.alpha()*1000)/1000}`)
}


const ended = (nodes, links, fileName) => {
    "STEP 2-----------------------------------------------------------------------"

    // const fileName = "Untitled-Graph-1_nodesLinks"
    // let rawdData = fs.readFileSync(`data/annealed/${fileName}.json`)
    // let parsedData = JSON.parse(rawdData)

    // // the data structure of nodes and links are {id : <int> , num : <int> , x : <float> , y : <float> , vx : <float> , vy : <float>, cluster : <string>}
    // // and {id : <int> , source : <nodesObject> , target : <nodeObject> , len : <float> , index : <int> }
    // let nodes = parsedData["nodes"]
    // let links = parsedData["links"]
    let annealedData = JSON.stringify({nodes , links});
    fs.writeFileSync(`data/annealed_gen/${fileName}.json`, annealedData)
}


const simulation = d3.forceSimulation()
.force("link", d3.forceLink().id(d => d.id).distance(d => 10000* d.len).iterations(1000).strength(2))
.force("charge", d3.forceManyBody().strength(-1))
.force("collide", d3.forceCollide((d) => d.num).strength(2))

simulation
.nodes(nodes)
// activate step 2
.on("tick",ticked)
.on("end", () => ended(nodes, links, fileName));

simulation.force("link")
.links(links)


"END STEP 1-----------------------------------------------------------------------"